20220906_study

금일도 마찬가지로 태풍으로 인하여 비대면 진행함.

정보보안
    -학습 내용 : 
        -정보보안 = 컴퓨터 보안 -> 네트워크 보안 -> 인터넷 보안
        -본 강의에서는 인터넷 보안에 대해 주로 다룬다.
        -보안 위배 예시 : 
            -노출 : 권한이 없는 사용자에게 열람
            -변경 : 권한이 없는 사용자가 수정
            -위장 : 권한 있는 사용자가 한 것처럼 송신
            -접속 차단 : 권한이 사라짐
            -부인 : 전송을 부정함
        -즉 컴퓨터 보안이란, 정보시스템의 자원인 가용성, 기밀성, 무결성 세가지를 지키려는 것.
        -핵심 보안 요구사항엔 위의 3가지에 인증성과 책임성이 추가된다.
            -인증이란 사용자의 신원 혹은 정보의 내용을 인증하는 것.
            -책임이란 추적가능케 하는 것. 즉, 부인하지 못하게 한다.
        -OSI보안 구조 X.800
            -보안 공격
            -보안 매커니즘
            -보안 서비스
        -RFC2828에 정의된 위협과 공격
            -비슷하지만 다름. 위협은 잠재적인 것, 공격은 실재하는 시도.
        -보안 공격은 소극적과 적극적으로 나뉨
            -소극적은 갈취(엿보기), 트래픽 분석 등.
            -적극적은 그보다 위험한 것들. 직접적이고.
인공지능

    -교재 : 별도 발언 부재
    -1차시 학습 내용 : 
        ' , ' 컴마로 분류된 데이터들을 csv 엑셀 파일로 저장.
        저장된 파일을 읽어들여 도식화할 수 있다. 
        사용 언어는 파이썬, 함수는 plot.

        import pandas as pd
        -> pandas라는 모듈을 pd라는 이름으로 불러온다.

        data_f=pd.read_csv('plant_diary')
        -> pandas 모듈의 read_csv 함수를 활용하여 'plant_diary' csv 파일을 읽어서 data_f 에 저장한다.

        plot(data_f, '날짜', '잎 너비', '주인')
        -> data_F의 데이터 중 날짜를 x축으로, 잎 너비를 y축으로 주인에 따라 색상을 다르게 하여 도식화 출력하기. (점 분포 그래프)

        이렇게 그려진 그래프에서, 앞으로 그려질 범위를 기존 데이터를 통해 대략적으로 유추할 수 있다.

        이를 기계를 통해 구현한 것이 인공지능이고, 학습을 머신러닝이라고 한다.
        kaggle.com/yungbyun 에서 학습 예정.

    -2차시 학습 내용 :

        kaggle은 데이터 사이언스에 대한 사이트로, 우리가 학습할 주소는 kaggle.com/yungbyun/

        오늘은 plant-dairy-original-simple을 통해 학습. 
        (*영상에서는 original이 아니라 simple이었으나 해당 코드 페이지를 찾지 못해 유사 페이지로 대체하여 학습 진행함)
        
        kaggle에서는 한줄씩, 혹은 전체를 한번에 코드를 실행하여 수행 결과를 볼 수 있다.

        violinplot : 바이올린 모양으로 plot도식화를 해주는 함수.

        violinplot(data_f, 'date', 'leaf_width')
        ->data_f에서 정보를 불러들이는데, date를 x축으로 leaf_width를 y축으로 삼는다. 색상은 자동으로 구별된다.

        ex) 사람의, 성별에 따른 키/몸무게 분포를 보고 싶다면?
        violing(data_f, 'sex', 'height/weight')

        여성의 키/체중 그래프가 보다 아래쪽에 분포하고 있는 모습을 볼 수 있다.

        데이터 분할하기
        A, B = split(data_f)
        -> A와 B로 data_f를 분할. 영상에서는 7:3으로 분할되었으나 분할 비율 설정 방법은 별도로 찾아볼 예정.

        gildong = DecisionTreeClassfier()
        gildong.fit('학습용 문제', '정답')
        -> 학습용 문제를 주면 정답을 맞추는 의사결정트리 학습 모델 gildong

        prediction = gildong.predict('테스트용 문제')
        ->학습된 gildong으로 '테스트용 문제'를 예측한다.