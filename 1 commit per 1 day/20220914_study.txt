20220914 study

수요일. 강의 3개 듣는 날.

-프로그래밍언어
    -최초의 컴퓨터 ABC에 대해 다시 설명.
    -알고리즘이란 문제 해결을 위한 절차의 나열. 이미 BC.3000~1500년도 경 메소포타미아의 찰흙판에서 
    알고리즘의 개념이 발견됨. 부동소숫점의 활용 또한.
    BC.300년 경 유럽에서 유클리드에 의해 최대 공약수 알고리즘이 발명되었으나 여전히 0의 개념은 없음.
    메소포타미아에서 별로 발전하지 못함.

    파스칼의 기계식 계산기 개발 이후, 찰스 베버지가 고안한 차분기관과 해석기관. 둘 다 실제로 구현하지는 못하였으나,
    이론상 동작한다. 해석기관은 튜링머신의 조건을 충족하는, 즉 컴퓨터의 개념을 만족하는 기계이다.
    찰스 베버지의 조수인 에이다 백작부인이 바로 최초의 프로그래머.

    이를 기리기 위한 ADA 언어 또한 존재한다.

    -프로그래밍 언어의 역사
        1950년대 초반. 기계어(어셈블리어) 사용.
        1950년대 중반. 포트란. 최초의 고급 언어로 후대 언어의 바탕이 됨. 효율성에 바탕을 두었다.
        이후 Cobol과 Albol 60의 개발로 효율성보다 언어의 일반적 원칙을 중시하여 설계되었다.
        1960년대부터 복잡성을 줄이고 추상화할 필요성을 느꼈으며,
        1970~1980년대 초에 들어서는 간결성과 추상화를 강조한 Pascal, C 등의 언어가 등장했다.
        이들은 정확성 증명 기법을 만족하여 프로그래밍의 신뢰성을 증대시켰다.
        1980년대에는 객체지향, 함수형 언어에 대한 관심으로 C++와 ML, Miranda, Scheme가 만들어졌다.


-프로젝트 랩스
    -2주차 주제 : 소프트웨어 개발 방법론 1
    버전 관리 시 1은 메인 업데이트, .1은 세부 기능, .0.1은 버그 패치로 보통 정한다.
    -애자일 방법론과 폭포수 개발 모델의 비교.
    -프로젝트에서의 역할
        -프로젝트 매니저 PM
        : 모든 관리 업무 책임, 외부와 내부 간 의견 조율.
        -프로젝트 리더 PL
        : 대형 프로젝트는 파트별로 파트장 필요. 
        각 파트에 대한 설계와 무결정에 대한 책임을 짐.
        -프로젝트 엔지니어 PE
        : 실무자. 상세 설계, 일정 산정, 실제 동작 및 완료에 대한 책임, 
        회사의 표준을 따를 책임, 프로젝트에 결함이 없도록 해야 할 책임.
        -데이터 분석가 DS
        : 데이터 분석을 통한 비즈니스 기회 탐색. 의사 결정자를 위해 적절한 시기에 정보 제공 필요.
        데이터, 통계 및 분석 방법, 분석 도구에 대한 이해가 필요함. 
        또한 비즈니스 커뮤니케이션, 결과 전달 능력도 필요함.

    -프로덕트 매니저 PM이란?
    제품 기획 설계, 운영, 출시, 판매전략부터 후속 개발까지 모든 과정을 아우르는 역할.
     본 강의에서 다루는 바와 가장 연관이 깊다.

    -폭포수 개발 방식은 개발 과정 중 비일비재한 일인
      ‘고객 요구사항 변경’에 잘 대응하지 못한다.
      -> 애자일(기민한, 재빠른, 민첩한) 방식으로 유연하게 대응.

    -애자일 방식
        1. 개발자와 고객 간 지속적 커뮤니케이션을 통한 요구사항 변화 수용
        2. 고객 결정 사항 우선 시행, 개발자 개인보다 팀 목표 우선시.
        3. 팀원들과 주기적인 미팅을 통해 프로젝트 점검.
        4. 주기적으로 제품 시현을 해서 고객으로부터 피드백을 받는다.
        5. 프로그램 품질 항상에 신경쓰기, 간단한 내부 구조를 통해 비용절감 목표로.

    폭포수 방식으로는 조각모음 형태라 완성되기 전까지 문제점 발견이 어려움.

    애자일 방식은 스케치 세분화 과정이라 고객의 피드백 받기가 쉬움.

    애자일 방식 중 스크럼 방식. 프로세스 진행하는, 프로세스에 대한 도구.

    스크럼에서 역할과 책임.
        -제품 책임자 : 제품의 특성과 긴으 정의, 출시 일자와 내용 결정.
            제품의 수익성ROI 책임
        -스크럼 팀 : 플젝 결과를 위해 각자의 역할을 수행. 교차 기능적, 자율적 조직화.
            적극적인 협동을 통해 최선의 결과를 도출.
            보통 5~9명( 6명까지 추천) 구성.
        -스크럼 마스터 : 팀이 생산적이고 기능적이도록 보장. 
        모든 역할과 긴으에 대해 밀접하게 협력하고 장애를 제거, 
        외부의 간섭과 방해로부터 팀을 보호, 스크럼 프로세스가 준수되도록 보장, 
        일일 스크럼과 스프린트 계획 및 리뷰 회의에 참석.
            국내에서는 프로젝트매니저PM이 병행하는 경우가 잦지만, 
            이건 리소스가 적을 때나 괜찮고 충분할 경우 나누는 게 좋음.
        -이해관계자 : 이해관계 O, 제품 제공 책임 X. 우선순위 부여, 
        팀과 협력, 리뷰 등에 참여. 의견 전달은 제품 책임자나 스크럼 마스터를 통해야 한다.

        제품 책임자와 스크럼 마스터, 스크럼 팀은 헌신적, 적극적으로 프로젝트에 참여해야 함.

        
    -XP eXtreme Programing   made by 켄트 벡. 
        1. 조금씩, 자주 발표. 
        2. 사이클 돌리며 개발. 
        3. 스펙 없는 건 개발 X.
        4. 테스트 코드 먼저 작성. 
        5. 야근 X, 정규 시간에만 작업.
        6. 기회가 생기면 언제 어디서나 코드 개선.
        7. 모든 테스트를 통과하기 전에는 발표 X.
        8. 조금씩 발표하는 걸 바탕으로 현실적 작업 계획 작성.
        9. 모든 일을 단순하게 처리.
        10. 두 명씩 팀을 편성, 모든 사람이 대부분의 코드를 알 수 있도록 돌아가면서 작업.

    -스크럼 제품 백로그 
    :우선순위 매겨진 요구사항 목록, 제품 개발 대상 목록, 요구사항 직원 이름 등 user 정보


    -스크럼 계획 미팅
    :미팅을 통해 나온 백로그의 집합 = 스프린트 백로그.

    -1 스프린트 백로그는 3일을 안넘는 게 좋다. 백로그의 숫자 = 스프린트 포인트.
        ex) 5명 직원 2주 스프린트 수행 = 8시간 X5 X 10 = 400 스프린트 포인트.

    플래닝 시 담당자까지 정하여 백로그에 기록. 오프라인에서는 포스트잇으로 큰 보드에 붙임.
    온라인에서는 트렐로 시스템 활용.


    -이터레이션 = 짧은 기간 = 스크럼에서의 스프린트. 보통 1주~4주 정도.


    -일일 스크럼 미팅. 
    :약속한 시간에 스크럼 팀원 전원이 모여서 짧게 서서 수행. 
    컨디션도 얘기. 어제 한 일, 오늘 할 일, 이슈 사항 등에 대해 공유한다. 
    스크럼마스터는 이 때 도출된 문제들을 어떠한 방법으로든 해결해줄 필요가 있다.
    가급적 정해진 시각에 수행해야한다. 길어지는 얘기는 SM이 미팅 이후에 진행되도록 유도. 이슈나 리스크는 작업 현황 판에 빨간 포스트잇으로 붙이기.

    -스프린트 리뷰. 
    :스프린트 종료 시점에 팀원 전체가 모여서 각자가 한 일을 리뷰하는 것. 
    고객 포함의 참석자들 앞에서.
    피드백을 받을 수도 있고 성과를 인정받아 사기 진작 효고도 있다. 
    다른 팀과 교류할 수도 있고, 일이 끝났다는 안정감을 느낄 수도 있다.
    주요 기능에 대해서 데모만 하기. 세부 내용은 데모도 X.

    -스프린트 회고. 개선점과 규칙*표준 준수 여부 검토. 단점보다 장점을 찾아야 함. 
    리뷰는 팀 바깥과 공유, 회고는 내부에서.
    스크럼 마스터가 스프린트 백로그를 보여주면서 
    팀원들의 보조로 스프린트 기간동안 있었던 주요 사건과 결정사항에 대해 요약.
    팀원이 한명씩 돌아가면서 모두 이야기.
    각자 좋았던 것, 개선 가능 사항, 다음에 해보고 싶은 것들 이야기. 
    스크럼 마스터 X 스크림 팀원이 해보고 싶은 것.
    3가지 관점. 만족, 반성, 개선. 


   - 스크럼 방식의 장점.
        반복주기를 통해 사용자(요구자)와 충분히 의견 나눔.
        팀원 간 신속한 협조, 조율
        업무에 집중 가능.
        스크럼 마스터가 문제 해결(배분)을 해줌.
        프로젝트 진행 현황이 보이기에 목표와 결과 추정을 빠르게 할 수 있음.
        또한 목표에 맞게 변화를 시도할 수도 있다.

    - 스크럼 방식의 단점.
        1. 추가작업 시간 필요. 반복주기=스프린트가 끝날 때마다 테스트 제품 만들어야함.
        2. 일일 스크럼 회의가 15분 내로 마쳐져야함.
        3. 투입 공수 불측정하므로 효율성을 평가할 수 없다.
        4. 프로세스의 품질을 평가할 수 없다. 그보다는 프로젝트 관리에 집중한 방법이므로.

    강의 프로젝트 조별 구성
        두 팀. 9명을 5명과 4명으로 나눔.
        A안 폭포수 개발 프로젝트
        B안 애자일 스크럼
        각 팀은 약간 활동량을 다르게 구성하여 다른 데이터를 받고, 또 개발 방식도 다르게 할 예정.


-소프트웨어개발분석
    3주차 학습 목표
        -스토리텔링
        -게임의 분류

        
    -스토리텔링

        2차원 평면 이미지, 시각적 스토리텔링 방식의 시초 = 동굴 벽화
        스토리텔링은 고객유인의 이유가 된다. 중요함.
    -게임의 분류
        -장르별(내용과 형식에 따라)
            • 시뮬레이션 게임 (Simulation Games)
            • 롤플레잉 게임 (Role-Playing Games)
            • 어드벤처 게임 (Adventure Games)
            • 액션 게임 (Action Games)
            • 스포츠 게임 (Sports Games)
            • 퍼즐 게임 (Puzzle Games)
            • 보드 게임 (Board Games)
        -플랫폼별(HW에 따라)
            아케이드, PC, 콘솔, 보드게임, 모바일, 휴대용, 윤라인 등.


    -유니티가 인기있는 이유 = 매출 연 10억 이하는 무료.
    이러한 개발 플랫폼은 소요가 적게 들어 편리하지만,
    유니티는 버전 별 호환성이 떨어지기 때문에 이탈이 많음.
    그래도 단일 개발툴로 다중 플랫폼 동시 릴리스는 매우 매력적.

    강의에서 사용할 버전은 2020.3,1f1 버전. 차후 안드로이드 플랫폼 활용 예정.
        


