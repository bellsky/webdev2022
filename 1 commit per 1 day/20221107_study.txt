20221107_study


-정보보안

    6장. 전송-레벨 보안

    6.1 웹 보안의 필요성

        웹의 특성

        -편리한 웹브라우저는 내부적으로 매우 복잡한 소프트웨어로 구성되어 있기에
            -보안 결함 존재 가능
            -새로운 기술로 업그레이드 하기도
            -다양한 보안 공격에 취약점이 드러남
        -웹서버를 침입 기반으로 사용함
            -지역 사이트 서버에 연결된 데이터와 시스템에 접근할 수 있다.
        -웹 서비스 주 고객은 보통 사용자이므로
            -보안 상 위협에 대해 비전문적이다.


            종류

            -무결성
            -기밀성
            -서비스거부
            -인증

        Web 트래픽 보안 방법

            -web 보안을 제공하는 여러가지 방법 가능
            -web 보안 방법은 응용범위나 tcp/ip 계층 상 웹의 상대적 위치에 따라 달라짐.
                네트워크층/전송층/응용층

            
        IPsec 

            -eNodeB에서 IPsec 게이트웨이까지 일종의 터널을 형성하여 거치게 됨.
            VPN 서비스의 기법 중 하나이다. 해당 지역 서비스를 그대로 받을 수 있음.


        인터넷 프로토콜 계층

            물리 - 링크 - 네트워크 - 전송 - 응용

             물리 : '비트' 
                유선.
             링크 : '인접 네트워크 요소 사이에서 데이터 전송'
                이더넷 or 802.111(wifi) or PPP
             네트워크 : 'routing of datagrams, 소스에서 목적지까지'
                 IP. routing protocols.
             전송 : '프로세스-프로세스 간 데이터 전송'
                TCP, UDP
             응용 : '네트워크 응용프로그램 지원'
                FTP, SMTP, HTTP
                

-컴퓨터일반
    오늘은 엑셀 할 예정.

    원래 엔터하면 아랫칸으로 커서가 이동함.
    드래그 범위 지정 후 엔터하면 해당 범위 내에서만 이동함.
    이미 쓴 칸에서 입력시도하면 전체 수정. F2 누르면 수정 가능.

    순서 1, 2... 입력 후 쉬프트로 나열 선택, 우측하단 + 로 드래그하면 1, 2 ,3 ,4 ...
     할 수 있다.

     엑셀에서 함수는 =???. 이렇게 =를 입력한다. SUM AVG 
        Tab을 눌러 선택한다.
        , 를 통해 인자를 추가. F4 키를 이용하여 
            해당 함수에 대해 상대적(표 상 절대적 위치)으로 바꿀 수 있다.
    
    함수 RANK(대상칸, 범위칸(F4 활용), 정렬차순)
       =IF((mid(C4,8,1)="1","남")) , IF(mid(C4,8,1)%2="0","여자"))


-프로그래밍언어론

    CH.6 변수, 바인딩, 식 및 제어문

    Binding
        바인딩 개념
            -기본적인 추상화 매커니즘.(이름, 또는 식별자를 사용한.)
                : 이름에 어떤 속성을 연결하는 과정. 즉, 프로그램의 기본 단위에 이 단위가
                택할 수 있는 여러 속성 중에서 일부를 선저하여 걸정하는 행위.

        바인딩 ex) const n = 5;    -> 이름 n에 두 개의 속성(상수, 5)가 바인딩됨.

        바인딩 시간
            = 바인딩(=속성이 이름에 연결되고 계산되는 과정)이 발생하는 시간
            바인딩 시간의 종류(꾸분)
                -언어 정의 시간, 언어 구현 시간, 번역 시간, 실행 시간
                <-                                             ->
                빠름                                           느림


                -실행시간
                    : 변수값 배정, 변수와 자료 구조에 기억 장소 할당 등,
                    모듈 프로그램 실행 시작 전에 발생하는 바인딩과
                    프로그램 실행 시 사용 시점에서 수시로 불생하는 바인딩.
                -번역 시간
                    : 언어를 번역하는 시점에서 발생되는 바인딩.
                    컴파일 시가, 링크 시간, 로드 시간.
                -언어 구현 시
                    : 언어를 컴퓨터 상에 구현할 때 특성의 일부를 확정하는 바인딩.
                    정수의 자릿수, 실수의 유효숫자 개수, 수의 기계 내에서의 표기법.
                -언어 정의 시간 :언어를 정의할 때 확정되는 바인딩
                    언어 구문 정의(반복문, 허용되는 자료 구조, 연산 종류 등), 
                    혼합현 연산에서 두 피연산자의 형 결정에 관한 사항.

        바인딩 시간의 중요성.
            언어들 간의 중요하고 미묘한 차이점이 바인딩 시간의 차이에서 발생한다.

            빠른 바인딩 -> 효율성 증가. 늦은 방니딩 _> 적용성 증가.


        **동적 dynamic = runtime 중에
        **정적 static = 번역 중에

    선언

        -정적 형 검사
            모든 변수의 자료형 선언 요구
            -단점 : 자료 생성, 소멸, 내용 변경 방법에 많은 제약 존재
            -장점 : 실행 시간 효율이 높다.
            ex) Fortran, Algol, PL/I , Cobol, Pascal 등

        -동적 형 검사
            선언문 사용 안함
            -장점 : 프로그래밍 단순화, 유연성 높음.
            -단점 : 프로그램 실행 시간 지연, 자료 표현상의 효율 저하, 복잡한 기억장소 경영 기법 요구.
            ex) : Lisp, APL, SNOBOL4

        -Algol, PL/I, Ada
            : 약간의 효율성을 잃는 대신 실질적인 큰 적응성을 얻는 선언문을 채택함.
            ex) 배열 선언

            *default 선언은 선언문으로 간주됨. Fotran의 정수형 실수형 선언문이 그 예.

      
    배정문
        : 변수 내용을 변경시키는 기본 연산 문장.

        배정 연산자
        ' = '
        ' <- '
        'LET ='
        ' := '

        l-value / r-value
        location / real



        배정문 구현
            l-value 중점 : 정적 바인딩

            r-value 중점 : 동적 바인딩