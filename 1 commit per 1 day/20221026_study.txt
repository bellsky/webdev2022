20221026_study

-프로젝트LAB

    데이터를 수집할 때는 일관성과 명확한 기준이 있어야한다.
    (*수집되는 데이터의 신뢰성을 위해 일정한 규칙성,
    즉 여기서는 생활패턴을 지니는 것이 좋다.)
    이를 위해 단위 통일, 형식 규격화를 하였다.
    
    또한 개인별로 최저-최고 기온을 적게한 것을 제주시/서귀포시로 적고, 
    기온 데이터는 공공 포털을 통해 받아오기로 하였다.

    https://data.kma.go.kr/data/grnd/selectAsosRltmList.do?pgmNo=36

    필요 없는 열은 제외하고 기간을 맞추어 스프레드 시트에 업로드하였다.

    본래 이번주에 프로젝트 계획서 검토가 있었어야하지만 시험 일정으로 인해 다음주,
    최대 다다음주까지 미루기로 하였음. 다음주 부터 회의 진행 예정.

-소프트웨어분석및설계 
중간 분량

※ 이론 (용어 및 함수에 대한 이해 평가)
    1. 게임의 사회적 특성 및 비선형성

        게임의 사회적 특징
        - 강한 친화력을 가지며 동시에 강한 공감대를 형성하는 집단으로 만듦
        - 게임 커뮤니티 – 길드(guild), 클랜(klan), 혈맹(血盟)
        - “게임, 특히 온라인 게임은 또 하나의 사회이다”

        비선형성(non-linearity)
        - 예측 불가능한 결말
        - 멀티엔딩(multi-ending)의 형식 – 플레이어의 선택에 따라 이야기
        의 결말이 달라짐
        - 플레이어의 선택과 능동적인 참여라는 기본 성격으로 인해, 서사의
        구조가 비선형적인 구조를 갖게됨


    2. 제로섬 게임 및 승리의 조건

        Zero sum 게임
        - 게임이나 경제 이론에서 여러 사람이 서로 영향을 받는 상황에서
        모든 이득의 총합이 항상 제로 또는 그 상태를 말함
        - 게임을 할 때 각각의 플레이어들이 서로 완전히 정반대의 목표를
        가지고 있을 때를 말함

        Non-zero sum 게임 
        =총합이 일정하지 않다. 모두가 성공 시 그만큼 총량 증대. Ex) 단체 PVE

        죄수의 딜레마
            논제로섬에서 모든 플레이어들이 서로 경쟁하는 상황.
            
        승리 조건
        - 게임의 승리조건은 플레이어가 어떻게 하면 게임을 이길 수 있는 지를 말함
        - 승자가 한 명인가, 아니면 여러 명인가?
        - 플레이어에게 명확히 설정된 목표가 있는가?
        - 게임은 언제 승리조건을 만족하는가?

    3. 기타 용어에 대한 정의

    4. 유니티 초기 화면의 뷰들에 대한 설명 및 이해


    5. 3차원 모델의 구성
        중력= Mass와 Gravity 영향. Physics
        탄성 physic Material의 Bouceiness, Bounce Combine 수치에 따라. 오브젝트의 Colinder에 Material를 연결해주어야 한다.
        질감 물체에 색/무늬를 입혀서 얻는다. Material를 활용.ㅇ Texture 이미지를 입히기도 함.


※ 실습
    1. 입력 함수 (키보드 및 마우스)
        Input.GetKeyDown(KEYCODE)
        -> 특정 키가 눌린 순간에
        Input.GetKeyUp(KEYCODE)
        -> 특정 키에서 떼진 경우에
        Input.anyKeyDown
        -> 아무 키나 눌린 순간에
        UpDown 빼고 GetKey 만 하면 키가 눌려있는 동안 계속
        GetMouseButtonUp/Down (숫자)
        -> 숫자가 0 = 좌클릭 1= 우클릭 2= 휠클릭

        Debug.Log (Input.mousePosition)
        -> 마우스 포인터의 위치를 반환한다. 좌하단이 0,0

        Input.GetAxis("Horizontal") : 좌우 이동키 방향
        Input.GetAxis("Vertical") : 전후 이동키 방향
        Input.GetAxis("Mouse X") : 스크린 마우스 X축 좌표
        Input.GetAxis("Mouse Y") : 스크린 마우스 Y축 좌표



    2. 물체의 이동, 회전 등
        xyz값을 랜덤으로 주고 싶을 때는 
        float rnd = Random.Range (-0.2f, 0.2f); //xyz값에 rnd 넣기.
        if조건 안에 transform.position += new Vector3 (x,y,z);  //이동
            transform.rotation += Quaternion.Euler (rnd, 0.0f, 0.0f);  //xyz축 회전
            transform.localScale = new Vector3 (rnd, rnd, rnd); //비율

        transform 앞에 물체를 둬야함. Ex) Sphere.transform    this.transform 
        -> this는 해당 스크립트가 연결된 물체를 가르키며 생략 가능하다.

        Quaternion.Euler : 오일러각에 해당하는 값을 쿼터니언 각도로 변환
        TIme.deltaTime : 직전 프레임과 현재 프레임 사이의 소요시간
        매 프레임 이동거리 = 속도 X Time.deltaTime
        -> 다른 기기 다른 프레임에서도 일정하게 움직일 수 있다. 느린 기기일수록 프레임 간 이동거리가 길어진다.
        if (Input.GetKey(KeyCode.UpArrow)){
                    GetComponent<Rigidbody>().AddForce(Vector3.forward * power * Time.deltaTime);
        }

        (this.)GetComponent<컴포넌트이름>
        현스크립트에 연결된 물체에서 찾을 경우에 허용됨.
        다른 스크립트(인스펙터 내 다른 오브젝트)에서 가져올 때
        GameObject.Find("Cube").GetComponent<cube_script>().scale_up();
        Cube의 GameObject인데 cube_script 스크립트 파일에 위치한 걸 확대.




    3. 기타 (실습 코드 이해하기)
        Void Start () {
        } -> 게임 시작 시 최초 1회만 실행.
        Void Update () {} ->매프레임마다 주기적 실행


유니티 화면 구성


    -상단 Game 뷰 : 인게임 카메라를 통해 보이는 화면.
        플레이 중 수정해도 게임 종료 시 저장되지 않는다.
        -상단 컨트롤바 : 게임Scene 표시 설정 
            어스펙트 톱 다운 : 화면비 설정
            ios 대상 기기 이름 설정
            전체화면
            묵음
            stats(통계) 렌더링 통계
            Gizmos 기즈모 = 쓸모있는 간단한 장치
                Inspector뷰의 구성요소Component를 선택할 수 있다.

    -Scene 뷰(game뷰 옆 위치) : 게임 화면 표시. 플레이 중에 변경한 내용 반영.
        실제로 확인하면서 위치나 크기를 조정할 수 있다.
        게임 제작 시 유니티에서 가장 많이 쓰인다.
        -컨트롤 바 : 씬의 표시, 조명, 오디오, 경관, 기즈모, 검색창, 2D

    -Scene 기즈모 : 씬뷰 우측 상단 위치. 입방체 + 원뿔 형태. 
        씬뷰의 빨녹청은 각각 xyz좌표를 의미한다.

    -Hierarchy뷰 (계층뷰)
        : 선택된 씬ㅇ[ 배치된 모든 오브젝트를 표기.
        -오브젝트의 계층 구조를 확인 및 편집 가능.
        -리소스를 계층뷰에 추가하면 씬에 배치됨.
        -혹은 스크립트를 통해서도 추가할 수 있다.

    -Project뷰 
        : 현프로젝트에 사용될 모든 오브젝트와 리소스 포함.
        prefab화 되지 않은 건 Hierarchy계층 뷰에만 둠.
        유니티로 리소스를 임포트하고 싶을 땐 프로젝트뷰를 통해서.
        
        왼쪽에는 프로젝트 폴더 구조 표시. 우측에는 폴더 내용.
        오른쪽 상단에는 검색창.

    -Inspector 인스펙터 뷰.
        : 선택한 오브젝트의 구성과 요소확인 및 편집.
        요소=스크립트, Mesh, 오디오, physics 등.=Componet
        컴포넌트를 추가한다=인스펙터 뷰에 정보가 표시된다.
        오브젝트의 position, rotation, scale 설정 가능.
        – Transform: 게임 오브젝트의 위치, 회전, 크기 결정
        – Mesh Filter: 게임 오브젝트를 구성하는 메쉬
        를 받고 메쉬 렌더러가 렌더링 하게 함
        – Sphere Collider: 게임 오브젝트를 둘러싼 구
        형태의 경계면으로 다른 물체와의 충돌 검사
        실시
        – Mesh Renderer: 메쉬를 화면에 렌더링

    *라이트 설정 시 scale값에 따라 빛의 유효면적이 넓어짐.




기타 용어
    성공적인 게임
        - 경쟁에서 이길 때 얻어지는 성취감, 행운에서 얻어지는 만족감, 조
        작감, 스릴감을 지속적으로 전달

    ‘컴퓨터 게임’의 정의
        - 일정한 규칙 아래 상호간의 경쟁을 통하여 승부를 낼 수 있는 것


    게임플레이 = (가상의 세계를 여행하는 동안의) 플레이어의 선택 또는 도전 같은 행동.

    게임의 속성 6개
        - 재미 : 게임을 통해 즐거움과 만족을 얻기에 자발적 참여함.
        스트레스 탈피, 기분 전환, 여가활동의 일종으로 인식.
        - 규칙 : 무의식적 대상의 의식화. 경쟁을 공정하게 하기 위한 수단. 
        게임을 한다 = 규칙을 지키면서 즐긴다.
        - 갈등과 경쟁 : pve/pvp 본질적으로 경쟁과 동일. 경쟁을 통한 보상이 긍정적임. 재미도 수반함.
        대등한 조건의 환경과 잘 설계된 규칙 = 파워밸런스를 제공해야함. 
        규칙 위배시 엄벌 필요.
        - 선택 : 게임이란 흥미로운 선택의 연속. 
    게임의 사건과 사건을 연결해주는 부분의 선택을 플레이어가 한다.
        - 능동적인 참여 = 게임의 진행을 플레이어가 결정하므로 몰입감을 증대시킨다. 
    게임 매체의 근간이 된다.
        - 서사성 : 플레이어를 시나리오 상 목표점으로 유도한다. 스토리.
        - 목표 = Goal. 게임을 종결시키는 조건. 인트로 영상이나 프롤로그를 통해 기본정보를 전달.
        - 비선형성 = 플레이어의 선택에 따라 결말이 달라지는 것. 선택&능동적 참여에 의해.

    게임의 특징 4개.

        -문화적 : 게임은 기존의 문화가 접목되고 발전된 형태.
        -산업적 : 부가가치가 높음. 미래지향적. 지식기반. 원소스 멀티유즈.
        -사회적 : 강한 친화력으로 집단 공감대 형성. 게임 커뮤니티. 또 하나의 사회.
        -학습적 : 게임 원리를 학습에 적용하여 효과 증진. Edutainment

    호모 루덴스. 인류는 유희를 추구하는 유희인이다.

    내재적 도전=묵시적인 도전. : 갑자기 생기는 대상. 
    의도적 도전=명시적인 도전 : 분명하게 주어지는 목표.


    확실한 정보 / 불확실한 정보
    체스게임/맵밝히기
    최적의 결정을 내리기 위한 정보의 제한이 생긴다. -> 죄수의 딜레마의 영향을 받게 된다.

    패배의 2가지 조건
    -무조건 지는 경우(1등을 못했을 때)
    -뚜렷하게 지는 경우 (*캐릭터가 죽거나 시뮬레이션에서 자원이 고갈되는 등)


    게임의 장르적 분류 
    • 시뮬레이션 게임 (Simulation Games) 
    • 롤플레잉 게임 (Role-Playing Games)
    • 어드벤처 게임 (Adventure Games) 
    • 액션 게임 (Action Games)
    • 스포츠 게임 (Sports Games)
    • 퍼즐 게임 (Puzzle Games) 
    • 보드 게임 (Board Games)


    스칼라와 벡터.
    크기/ + 방향
    Vector3 : 3차원 공간 벡터.
    오른손좌표계와 왼손좌표계의 차이. Z축의 방향. 유니티와 Direct3D는 왼손좌표계를 사용한다.
    전진이 1, 후진이 -1.


    물체에 물리적인 특성을 부여하기 위해서(중력, 마찰력 등에 의한 움직임)는 
    Rigidbody 컴포넌트를 추가해야함. 키보드로 움직이는 건 미해당. 오브젝트 선택 -> 컴포넌트 -> 피직스 에서 선택한다.
    Rigidbody(강체)의 변수. 
    Mass질량, Drag공기저항, Angular Drag회전운동저항, 
    UseGravity=On/Off, 
    is Kinematic = 충돌 체크는 하지만 물리엔진 기능을 무효화시킴
    Interpolate = 보간. 끊겨보일 때 사용. 이전/다음프레임 이동 기반 근사.
    Extrapolate = 직전/직직전 프레임 이동 기반 근사.
    Collision Detection 충돌감지.
        -Discrete
        : 현재프레임 위치만으로 충돌검사. 터널링(뚫기)발생.
    Rigidybody가 있는 물체에 적용.
    -Continuos
    : 이전프레임-현재프레임 궤적 활용 충돌 검사. 계산량 증가함.
    Rigidybody가 없는 물체.

    -Continuos Dynamic
        : Rigidbody 없는 물체, 계산량 매우 많음.
    Constraints : 외력에 의한 움직임에 제약 부여. (선택한 방향이동/축회전 불가)

    충돌 체크 시 경계볼륨을 이용한다. 보통 Sphere, Cylinder, box, Capsule 사용.


    프리팹(Prefab)
    • 게임 오브젝트의 원본을 간직하고 있는 데이터

    • Original Prefab
    ▪ 기존에 해당 물체를 가져온 원본과의 연결을 삭제
    • Prefab Variant
    ▪ 원본과의 연결을 유지
