20221130_study


-프로그래밍언어

    Ch.9 기억 장소 배당

        단위프로그램
            -오프셋 offset
                활성 레코드에서의 상대위치이다.
                자료 참조 시 주소 대신 사용한다.
                새로운 환경 설정
                선언 가능 - 지역 식별자 도입

            -참조 환경
                단위 프로그램의 지역 변수 및 사용 가능한 비 지역변수
                지역변수 : 현재 단위 프로그램 활성 레코드에 할당
                비지역변수 : 다른 진위 프로그램 활성 레코드 할당

            -활성 레코드 바인딩 -> 실제 기억장소 할당
                코드부와 해당 활성 레코드의 바인딩
                재귀호출 : 활성레코드가 재귀적으로 발생한다 -> 동적 바인딩
                재귀 호출 불허용 시 : 활성 레코드가 1개만 존재한다 -> 정적 바인딩(로딩하면서 메모리 할당을 전부 마치는 것)


        정적 기억장소 할당
            : 코볼, 포트란, 베이직 등의 옛날 언어들.

            모든 변수들의 오프셋이 고정된다. (주소 대용으로 쓰임)


            장점 : 구현이 쉽고 간결함.
                    효율적인 프로그램 실행이 가능함.
            단점 : 유연성 적용
                    ->배열 크기 불변
                    ->recursion(재귀 호출) 불가
                    ->활성화되지 않은 황성레코드 상주(*오류 처리 루틴 등)

            정적 변수 :
                    번역 시간에 크기 고정 (크기 - 정적 바인딩)
                    번역 시간 할당 (정적 할당)

        스택 기반 기억장소 할당 (= stack based storage allocation = 준 동적 할당)
            -동적 기억 장소 할당 
                -stack 할당(자동적=동적)
                -heap 할당(동적)  --->>> 이게 진짜 동적임

                모든 인터프리터 언어가 동적 기억장소를 사용한다.
                대부분의 컨파일러 언어에서(블록 중심 언어) 사용한다.

            -Algol( C ) 유사 like 언어 
                -> algol60에서 블록 개념 도입 이후

            
            -활성 레코드 크기 : 정적 바인딩
                -지역 변수 생성 : 단위 프로그램 활성화 시점
                -변수 오프셋 : 정적 바인딩
                -활성 레코드 : 매 호출 시 할당 -> recursion 허용
                -준 정적 변수 : 준 동적 변수
                    -크기 오프셋 번역 시간 고정 : 크기 정적 바인딩
                    -실행 시간 할당 = 실제 주소 실행 시간 바인딩 : 기억 장소 할당
                    -ex) 파스칼(포인터 없음), C(heap 제외)
                        일반적인 지역변수들은 전부 준 동적 변수이다.

            -활성 레코드 크기 : 정적 바인딩
            -단위 activation 구조
                코드부 : 기계어 명령어
                활성 레코드 
                    -지역변수, 형식 매개 변수
                    -정적 링크
                    -동적 링크
                        -반환 주소
                        -호출한 단위 프로그램의 활성 레코드 주소
                        -동적 체인 구성 -> 동적 내포관계 표현  (정적 링크 동적링크 반환링크 모드 포인터로 연결되어있다)
                    -반환 주소
                        -반환 시 실행 주소
                        -