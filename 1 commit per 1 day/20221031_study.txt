20221031_study


-정보보안


    제 5장 네트워크 접근 통제와 클라우드 보안.


    5.1 네트워크 접근 통제
    5.2 확장 인증 프로토콜
    5.3 IEEE 802.1X 포트-기반 네트워크 접근 통제


    5.1 네트워크 접근 통제 NAC

        -네트워크 접근 관리에 대한 보호 용어.
        -사용자의 기기(종단)이 안전한 지 점검.
        -사용자의 네트워크 로그인을 인증, 데이터 접근 권한을 결정.


        NAC 시스템 요소
        -접근 요청자 AR
            -네트워크에 접근을 시도하는 노드.
            -NAC 시스템이 관리하는 모든 장치
        -정책 서버 Policy Server
            -접근 요청자 AR의 입장과 기업의 정책에 기반해 접근 허가를 언제 할지 결정.
            -안티 바이러스, 패치 관리, 유저 디렉터리 같은 백엔드 시스템을 고려하여 호스트 상태를 결정한다.

        -네트워크 접근 서버 NAS
            -원격 사용자가 기업 내부 네트워크 연결 시 접근 통제 지점 역할.
            -매체 게이트웨이, 원격 접근 서버, 정책 서버라고도 한다.

        네트워크 접근 시행 방법

        -IEEE 802.1X
            -포트를 IP 주소에 지ᅟᅥᆼ하기 전에 인증을 진행하는 링크 계층 프로토콜.
            -여기서는 확장 가능한 인증 프로토콜을 사용하여 인증 절차를 수행.

        -가상 LAN (VLAN)
            -상호 연결된 LAN으로 구성된 기업 네트워크를 여러개의 논리적 세그먼트인 가상 LAN으로 분리함.
            -동적으로 생성됨. NAC시스템이 적정 수준의 가상 LAN에 AR을 안내함.

        네트워크 접근 시행 방법

        -방화벽 : 기업 호스트와 외부 사용자 간의 네트워크 트래픽을 허용/거부하여 일종의 NAC를 제공한다.

        -DHCP 관리 : 호스트에 IP 주소를 동적으로 할당할 수 있는 인터넷 프로토콜. 설치 및 구성이 쉬운 대신 IP 스누핑에 노출되어 제한된 보안을 제공한다.



        5.2 확장 인증 프로토콜 EAP
        :네트워크 접근 인증 및 프로토콜 프레임워크 역할.
        클라이언트와 인증 서버간의 다양한 인증방법을 캡슐화가능한 일련의 프로토폴 메시지 제공.
        P2P링크, LAN 및 기타 네트워크 같은 네트워크 및 링크 계층 장치에서 작동한다.
        다양한 링크와 네트워크에서 필요로 하는 인증기능을 제공한다.


        EAP 방법
        -EAP-TLS(EAP Transport Layer Security)
        -EAP-TTLS(EAP Tunneled TLS)
        -EAP-GPSK(EAP Generalized Pre-Shared Key)
        -EAP-IKEv2 


        EAP 메시지 필드
        -코드
        -식별자
        -길이
        -데이터
            

    5.3 IEEE 802.1X 포트-기반 네트워크 접근 통제

        =LAN에 대한 것.

            EAPOL : EAP over LAN
            – 네트워크 계층에서 동작하는데 링크 계층에서 이더넷이나 와이파이 같은 IEEE 820 LAN을 사용

            EAPOL 패킷 형식
            -프로토콜 버전
            -패킷 유형
            -패킷 본문 길이
            -패킷 본문


        이번 장에서 중요한 사항
        EAP라는 게 있다
        EAPOL이 랜 상에서 EAP가 동작하는 것.


-컴퓨터일반

    간단한 파이썬 tensorflow활용 이미지 인식 예제를 실행하고 싶었으나 각종 오류가 발생하여 해결중에 있음.



    6장 자료구조

        1. 자료구조의 개요
        : 자료를 효율적으로 표현하고 저장하고 처리하기 위한 것.
        단순/선형/비선형 구조로 나뉨.
        알고리즘과의 구분 : 알고리즘은 주어진 물제를 효율적으로 해결하기 위한 명령어들의 집합.


        2 배열
        연속적인 데이터 저장. 첫 번째 데이터 기준 상대적 위치로 나머지 데이터를 파악한다.
        파이썬에서는 리스트로 사용한다.
        이미지 정보도 2차원으로 저장함. 색상 FFFFFF 면 RGB 16비트 3자리, 
        FFFFFFF면 투명도 A를 합한 RGBA 4자리. 4바이트.
        00000000이면 검은색, FFFFFFFF이면 흰색.
        배열의 접근은 상대접근으로 쉽게 할 수 있지만, 추가나 삭제는 복잡하다. 자료를 한 칸씩 옮겨야 하기 때문에.


        3. 연결리스트
        Linked List
        불완성을 보안한 이중 연결 리스트도 존재한다.



        4. 스택

        : 
        LIFO = Last In First Come
        가장 고정적인 형태. 수납의 역순으로 출납함. 즉 출구와 입구가 같다.
        데이터 출납 방식 push / pop

        파이썬에서는 리스트를 사용하여 스택을 구현한다. append() 와 pop()함수가 대응된다.

        5. 큐 

        FIFO = First In First Come
        들어온 순서대로 나간다. 출구와 입구가 별도.

        이중 큐 = DeQUEUE 데큐. 양쪽으로 출입 가능한 구조.





-프로그래밍언어


    CH.5 컴파일러 개요


    어휘분석 

        토큰의 정의

            special form / general form.
            특수 / 일반 형태

            특수 : keyword, operator symbols , Delimeters
            일반 : 식별자 Identifier, 상수 constant
            토큰 구조 : 토큰 번호 + 토큰 값

        심볼테이블
        : 어휘분석과 구문분석 시 식별자에 관한 정보 수집, 저장을 한다. identifier 같은 것들.
        constant같은 건 리터럴 테이블에 저장한다.
        구조 : name + attributes
        Hashing Table로 이용한다.


        토큰 인식
        
        -문자집합 형태로. letter, digiit, specail_char
        -식별자 인식. 유한 오토마타. 정규 문법. 정규 표현 Regular expression .
        (오토마타 : 자동으로 따라다니며 무언가를 생성해주는 기계?)
        비결정적? 대안이 존재할 때. 파싱은 결정적이어야 한다.
        
            오토마타의 구조 그림
            이미지 start -> S원 –L-> A원(l,d,...)    /letter digit
            S = state A = ?automata?

            정규문법 -> 정규표현(=수학적표현)
            X = aX+ bX + c
            ->  X = (a+b)X +c
            -> X = (a+b)*c

            자동 어휘분석기 제작기 LEX에 정규표현식을 넣는다.

        문법을 표현하는 3가지 방법 BNF Parse-Tree, Syntax Diagram



        구문분석
            구문분석 방법
            Parsing :  오메가소문자는 L(G)의 원소가 될 수 있을까??? 문법이 맞는지에 따라.
            오메가 = Token Stream. (stream = 여러개 있는데 순서에 따라 나열되어있다는 함축적의미)

            A sequence of tokens를 Parser에 넣으면 Parser Tree가 나오거나 에러 메시지가 나옴. 옳은 문장인지 틀린 문장인지에 따라. 

            -Top Down/Bottom up
            요즘은 Bottom up의 Shift-reduce parser 방식만 쓴다.

            AST = 추상구문트리

            top down = left parse 리터럴 심볼이 입력되면 가장 왼쪽 것부터 처리한다.
            bottom up 은 입력되면 오른쪽부터 처리를 하는데 right parse 역순으로(리버스) 처리를 한다.
            

            top down parsing의 left parsing은 back tracking 방식으로 굉장히 많은 시행착오를 거친다.

            반명 right parsing은 ‘handle’만 찾으면 한번에 잘 찾을 수 있다. first와 follow라는 수학적 공식에 의해 명시적으로 정해지기에 backtracing 없이 시행할 수 있다.


            Parse Tree 
                derivation tree 유도트리 – string : a + a * a

            AST 추상구문트리
                -> 트리에 연산자와 상수만 남김
                리프노드 연산자(식별자/상수)
                중간노드 연산자(의미있는 production 규칙 이름


            Bottom-Up parse
                입력 string의 start symbol을 줄여준다.
                자료구조 stack을 쓰므로 역순.


            shift-reduce parsing
            shift = push
            reduce = pop
            parsing stack
            Input buffer = token string